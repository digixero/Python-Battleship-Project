playing = True #playing condition
pieces = { "Aircraft Carrier" : 5, "Battleship" : 4, "Submarine" : 3, "Cruiser" : 3, "Destroyer" : 2}
score_p1 = 0
score_p2 = 0

#sets up a 10 X 10 board with all coordinates labeled
def setup_board(board):
	for x in range(11):
		board.append(["O"] * 11)
	board[0][0] = "  "
	for x in range(10):
		board[0][x + 1] = chr(ord('a') + x)
	for x in range(10):
		board[x + 1][0] = str(x + 1) + " "

#prints board seperated by spaces
def print_board(board, player):
	print "%s's board" % (player)
	for row in board:
		print "  ".join(row)

#translate char back to int
def translate(coord):
	num = 1
	for alpha in "abcdefghij":
		if alpha == coord:
			coord = num
		else:
			num += 1
	return int(coord)

#fuction to check if pieces will overlap on the board
def overlap_piece(board, x_front, y_front, x_back, y_back):
	x_front = int(x_front)
	y_front = int(y_front)
	x_back = int(x_back)
	x_back = int(x_back)
	if x_front == x_back:
		if y_front > y_back:
			for x in range(y_back, y_front + 1):
				if board[x][x_front] == '*':
					return 0
		else:
			for x in range(y_front, y_back + 1):
				if board[x][x_front] == '*':
					return 0
	else:
		if x_front > x_back:
			for x in range(x_back, x_front + 1):
				if board[y_front][x] == '*':
					return 0
		else:
			for x in range(x_front, x_back + 1):
				if board[y_front][x] == '*':
					return 0

#updates corresponding board and places ship pieces
def place_piece(board, x_front, y_front, x_back, y_back):
	x_front = int(x_front)
	y_front = int(y_front)
	x_back = int(x_back)
	x_back = int(x_back)
	if x_front == x_back:
		if y_front > y_back:
			for x in range(y_back, y_front + 1):
				board[x][x_front] = '*'
		else:
			for x in range(y_front, y_back + 1):
				board[x][x_front] = '*'
	else:
		if x_front > x_back:
			for x in range(x_back, x_front + 1):
				board[y_front][x] = '*'
		else:
			for x in range(x_front, x_back + 1):
				board[y_front][x] = '*'

#updates both the board used for guesses and board with pieces
def place_attack(board, guess_board, x, y):
	x = int(x)
	y = int(y)
	board[y][x] = "x"
	guess_board[y][x] = "x"
	
#checks winning condition, used for board that has pieces on it to ID if all ships have been destroyed.
def check_winner(board):
	for x in range(10):
		for y in range(10):
			if board[x + 1][y + 1] == "*":
				return 0

#Intro of game
print "Welcome to Battleship"
player_1 = raw_input("Player 1, please input your name:")
player_2 = raw_input("Player 2, please input your name:")
while playing == True:
	print "Let's play Battleship!"
	board_p1 = [] #game board in list form
	board_p2 = [] #second game board
	setup_board(board_p1)
	setup_board(board_p2)
	print_board(board_p1, player_1)
	print "%s, you will place your pieces on the board first. Tell %s to look away." % (player_1, player_2)
	#player 1 placing pieces on the board. Pieces will be given to player individually instead of letting user choose.
	for ship in pieces:
		print "Please place your %s, it takes up %s coordinates" % (ship, pieces[ship])
		#checker to prevent ships from overlapping
		overlap_check = True
		while overlap_check == True:
			#The x coordinate or column for the front end of the ship
			check_fx = False
			while check_fx == False:
				x_coord_front = raw_input("X coordinate for front:")
				for alpha in "abcdefghij":
				    if x_coord_front == alpha:
				        check_fx = True
				        x_coord_front = translate(x_coord_front)
				if check_fx == False:
				    print "Your input is invalid. Try again."
			#The y coordinate or row for the front end of the ship        
			check_fy = False
			while check_fy == False:
				y_coord_front = raw_input("Y coordinate for front:")
				for num in range(10):
				    if y_coord_front == str(num + 1):
				        check_fy = True
				        y_coord_front = int(y_coord_front)
				if check_fy == False:
				    print "Your input is invalid. Try again."
			#loops till ship length is correct
			dist_check = False
			while dist_check == False:
				#The x coordinate or row for the back end of the ship 
				check_bx = False
				while check_bx == False:
					x_coord_back = raw_input("X coordinate for back:")
					for alpha in "abcdefghij":
						if x_coord_back == alpha:
							check_bx = True
							x_coord_back = translate(x_coord_back)
					if check_bx == False:
						print "Your input is invalid. Try again."
				#The y coordinate or row for the front back of the ship 
				check_by = False
				while check_by == False:
					y_coord_back = raw_input("Y coordinate for back:")
					for num in range(10):
						if y_coord_back == str(num + 1):
							check_by = True
							y_coord_back = int(y_coord_back)
					if check_by == False:
						print "Your input is invalid. Try again."
				#ship length checker
				if abs(x_coord_back - x_coord_front) == pieces[ship] - 1 or abs(y_coord_back - y_coord_front) == pieces[ship] - 1:
					dist_check = True
				else:
					print "This placement makes the size of your ship incorrect. Try again."
			overlap_check = overlap_piece(board_p1, x_coord_front, y_coord_front, x_coord_back, y_coord_back)
			if overlap_check == 0:
				overlap_check = True
				print "You can't put a ship on top of another. Try again."
			else:
				overlap_check = False
		#adds ship piece on the board after all checks are complete
		place_piece(board_p1, x_coord_front, y_coord_front, x_coord_back, y_coord_back)
		print_board(board_p1, player_1)
	print_board(board_p2, player_2)    
	#player 2 placing pieces on the board
	print "%s, it is your turn now. Tell %s to look away." % (player_2, player_1)
	for ship in pieces:
		print "Please place your %s, it takes up %s coordinates" % (ship, pieces[ship])
		#checker to prevent ships from overlaping each other
		overlap_check = True
		while overlap_check == True:
			#The x coordinate or row for the front end of the ship 
			check_fx = False
			while check_fx == False:
				x_coord_front = raw_input("X coordinate for front:")
				for alpha in "abcdefghij":
					if x_coord_front == alpha:
						check_fx = True
						x_coord_front = translate(x_coord_front)
				if check_fx == False:
					print "Your input is invalid. Try again."
			#The y coordinate or row for the front end of the ship 
			check_fy = False
			while check_fy == False:
				y_coord_front = raw_input("Y coordinate for front:")
				for num in range(10):
					if y_coord_front == str(num + 1):
						check_fy = True
						y_coord_front = int(y_coord_front)
				if check_fy == False:
					print "Your input is invalid. Try again."
			#loops till ship length is correct
			dist_check = False
			while dist_check == False:
				#The x coordinate or row for the back end of the ship 
				check_bx = False
				while check_bx == False:
					x_coord_back = raw_input("X coordinate for back:")
					for alpha in "abcdefghij":
						if x_coord_back == alpha:
							check_bx = True
							x_coord_back = translate(x_coord_back)
					if check_bx == False:
						print "Your input is invalid. Try again."
				#The y coordinate or row for the back end of the ship 
				check_by = False
				while check_by == False:
					y_coord_back = raw_input("Y coordinate for back:")
					for num in range(10):
						if y_coord_back == str(num + 1):
							check_by = True
							y_coord_back = int(y_coord_back)
					if check_by == False:
						print "Your input is invalid. Try again."
				#ship length checker
				if abs(x_coord_back - x_coord_front) == pieces[ship] - 1 or abs(y_coord_back - y_coord_front) == pieces[ship] - 1:
					dist_check = True
				else:
					print "This placement makes the size of your ship incorrect. Try again."
			overlap_check = overlap_piece(board_p2, x_coord_front, y_coord_front, x_coord_back, y_coord_back)
			if overlap_check == 0:
				overlap_check = True
				print "You can't put a ship on top of another. Try again."
			else:
				overlap_check = False
		#adding piece on board
		place_piece(board_p2, x_coord_front, y_coord_front, x_coord_back, y_coord_back)
		print_board(board_p2, player_2)
	guess_p1 = [] #game board for players to place guesses without seeing the pieces placed
	guess_p2 = [] #second game board for players to place guesses without seeing the pieces placed
	setup_board(guess_p1)
	setup_board(guess_p2)
	print "%s, you will go first." % (player_1)
	#Start of game logic, checker for win condition
	winner = False
	while winner == False:
		print_board(guess_p1, player_1)
		print "%s, input your coordinates." % (player_1)
		#checker to prevent guesses form overlapping
		overlap_check = True
		while overlap_check == True:
			check_x = False
			while check_x == False:
				guess_x = raw_input("x coordinates:")
				for alpha in "abcdefghij":
					if guess_x == alpha:
						check_x = True
						guess_x = translate(guess_x)
				if check_x == False:
					print "Your input is invalid. Try again."
			check_y = False
			while check_y == False:
				guess_y = raw_input("y coordinates:")
				for num in range(10):
					if guess_y == str(num + 1):
						check_y = True
						guess_y = int(guess_y)
				if check_y == False:
					print "Your input is invalid. Try again."
			#checker to ID if user has guessed the spot
			if guess_p1[guess_y][guess_x] == "x":
				print "You already guessed this spot. Try again"
			else:
				overlap_check = False
		#ID if player hit something before placing the marker on the boards
		if board_p2[guess_y][guess_x] == "*":
			print "You hit something!"
		else:
			print "Sorry, You miss."
		place_attack(board_p2, guess_p1, guess_x, guess_y)
		win_game = check_winner(board_p2)
		if win_game != 0:
			print "You sunk all the battle ships. You win!"
			score_p1 += 1
			break
		print "It is %s's turn" % (player_2)
		print_board(guess_p2, player_2)
		print "%s, input your coordinates." % (player_2)
		overlap_check = True
		while overlap_check == True:
			check_x = False
			while check_x == False:
				guess_x = raw_input("x coordinates:")
				for alpha in "abcdefghij":
					if guess_x == alpha:
						check_x = True
						guess_x = translate(guess_x)
				if check_x == False:
					print "Your input is invalid. Try again."
			check_y = False
			while check_y == False:
				guess_y = raw_input("y coordinates:")
				for num in range(10):
					if guess_y == str(num + 1):
						check_y = True
						guess_y = int(guess_y)
				if check_y == False:
					print "Your input is invalid. Try again."
			if guess_p2[guess_y][guess_x] == "x":
				print "You already guessed this spot. Try again"
			else:
				overlap_check = False
		if board_p1[guess_y][guess_x] == "*":
			print "You hit something!"
		else:
			print "Sorry, You miss."
		place_attack(board_p1, guess_p2, guess_x, guess_y)
		win_game = check_winner(board_p1)
		if win_game != 0:
			print "You sunk all the battle ships."
			score_p2 += 1
			break
		print "It is %s's turn" % (player_1)
	print "Score \n %s: %s \n %s: %s" % (player_1, score_p1, player_2, score_p2)
	#checker to see if players wish to play again.
	check = False
	while check == False:
		play_again = raw_input("Would you like to play again?(y,n)")
		if play_again == 'n':
			playing = False
			check = True
		elif play_again == 'y':
			playing = True
			check = True
		else:
			print "Input was invalid. Try Again"
